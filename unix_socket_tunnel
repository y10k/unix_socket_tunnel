#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

require 'io/wait'
require 'logger'
require 'optparse'
require 'socket'

STDLOG = Logger.new(STDOUT)
STDLOG.level = Logger::WARN

def ping_process(pid)
  begin
    Process.kill(0, pid)
    true
  rescue SystemCallError
    STDLOG.info("process lost: #{pid}")
    STDLOG.debug($!)
    false
  end
end

def start_tunnel(read_socket, read_address, write_socket, write_address, chunk_bytes: 1024*8)
  Thread.new{
    STDLOG.info("start tunnel: #{read_address} -> #{write_address}")
    begin
      data = ''
      while (true)
        STDLOG.info("tunnel read: #{read_address} -> #{write_address}")
        read_socket.readpartial(chunk_bytes, data)
        STDLOG.info("tunnel write: #{read_address} -> #{write_address}: #{data.bytesize} bytes")
        write_socket.write(data)
      end
    rescue EOFError, SystemCallError
      STDLOG.debug($!)
    ensure
      STDLOG.info("stop tunnel: #{read_address} -> #{write_address}")
      read_socket.close_read
      write_socket.close_write
    end
  }
end

watch_pid = Process.ppid
accept_polling_timeout_seconds = 0.1
io_chunk_bytes = 1024 * 8
File.umask(0077)
dir_access_deny_mode_mask = 0077

opts = OptionParser.new
opts.banner = "Usage: #{File.basename($0)} [options] CONNECT_PATH LISTEN_PATH"
opts.on('-v', '--verbose') {
  STDLOG.level = Logger::INFO
}
opts.on('-l', '--log-level=LEVEL', %w[ debug info warn error fatal ]) {|level|
  STDLOG.level = level
}
opts.on('-w', '--watch-pid=PID', Integer) {|pid|
  watch_pid = pid
}
opts.on('--accept-timeout=SECONDS', Float) {|timeout_seconds|
  accept_polling_timeout_seconds = timeout_seconds
}
opts.on('--io-chunk-size=BYTES', Integer) {|bytes|
  io_chunk_bytes = bytes
}
opts.on('-u', '--umask=OCTETS', Integer) {|octets|
  File.umask(octets)
}
opts.on('--dir-access-deny-mode-mask=OCTETS', Integer) {|octets|
  dir_access_deny_mode_mask = octets
}
opts.parse!

if (ARGV.length != 2) then
  puts opts.banner
  exit(1)
end

connect_socket_path = ARGV.shift
listen_socket_path = ARGV.shift

STDLOG.info("log level: #{Logger::SEV_LABEL[STDLOG.level] || STDLOG.level}")
STDLOG.info("watch pid: #{watch_pid}")
STDLOG.info("accept polling timeout: #{accept_polling_timeout_seconds} s")
STDLOG.info("IO chunk size: #{io_chunk_bytes} bytes")
STDLOG.info("umask: #{"%04o" % File.umask}")
STDLOG.info("directory access deny mode mask: #{"%04o" % dir_access_deny_mode_mask}")

unless (File.socket? connect_socket_path) then
  STDLOG.fatal("not found a connect socket: #{connect_socket_path}")
  exit(1)
end

listen_socket_dir = File.dirname(listen_socket_path)
unless (File.directory? listen_socket_dir) then
  STDLOG.fatal("not found a listen socket directory: #{listen_socket_dir}")
  exit(1)
end

listen_socket_dir_stat = File.stat(listen_socket_dir)
listen_socket_dir_mode = listen_socket_dir_stat.mode & 07777
dir_access_deny_bits   = listen_socket_dir_mode & dir_access_deny_mode_mask
listen_socket_dir_mode_log    = '%04o' % listen_socket_dir_mode
dir_access_deny_bits_log      = '%04o' % dir_access_deny_bits
dir_access_deny_mode_mask_log = '%04o' % dir_access_deny_mode_mask

STDLOG.info("directory access mode: [#{listen_socket_dir}] #{listen_socket_dir_mode_log}")
if (dir_access_deny_bits == 0) then
  STDLOG.info("directory access allow: [#{listen_socket_dir}] #{dir_access_deny_bits_log}=#{listen_socket_dir_mode_log}&#{dir_access_deny_mode_mask_log}")
else
  STDLOG.fatal("directory access deny: [#{listen_socket_dir}] #{dir_access_deny_bits_log}=#{listen_socket_dir_mode_log}&#{dir_access_deny_mode_mask_log}")
  exit(1)
end

tunnel_thread_group = ThreadGroup.new
begin
  STDLOG.info("open listen socket: #{listen_socket_path}")
  server_socket = UNIXServer.new(listen_socket_path)
  catch(:end_of_tunnel) {
    while (true)
      until (server_socket.wait_readable(accept_polling_timeout_seconds) != nil)
        ping_process(watch_pid) or throw(:end_of_tunnel)
      end
      listen_socket = server_socket.accept
      connect_socket = UNIXSocket.new(connect_socket_path)
      tunnel_thread_group.add(start_tunnel(listen_socket, listen_socket.local_address.inspect_sockaddr,
                                           connect_socket, connect_socket.remote_address.inspect_sockaddr,
                                           chunk_bytes: io_chunk_bytes))
      tunnel_thread_group.add(start_tunnel(connect_socket, connect_socket.remote_address.inspect_sockaddr,
                                           listen_socket, listen_socket.local_address.inspect_sockaddr,
                                           chunk_bytes: io_chunk_bytes))
      ping_process(watch_pid) or throw(:end_of_tunnel)
    end
  }

  STDLOG.info("close listen socket: #{listen_socket_path}")
  server_socket.close

  STDLOG.info("wait to end of connections")
  for thread in tunnel_thread_group.list
    thread.join
  end

  STDLOG.info("end of tunnel")
rescue
  STDLOG.fatal($!)
  exit(1)
end

exit(0)

# Local Variables:
# mode: Ruby
# indent-tabs-mode: nil
# End:
